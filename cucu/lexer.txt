INT_TYPE : int
ID : fucn
LPAREN : (
INT_TYPE : int
ID : r
RPAREN : )
SEMICOLON : ;
INT_TYPE : int
ID : fucn
LPAREN : (
INT_TYPE : int
ID : r
RPAREN : )
LBRACE : {
return : return
NUM : 0
SEMICOLON : ;
RBRACE : }
INT_TYPE : int
MAIN : main
LPAREN : (
INT_TYPE : int
ID : argc
COMMA : ,
CHAR_TYPE : char *
ID : argv
RPAREN : )
LBRACE : {
INT_TYPE : int
ID : i
ASSIGN : =
NUM : 2
TIMES : *
NUM : 3
SEMICOLON : ;
CHAR_TYPE : char *
ID : s
SEMICOLON : ;
INT_TYPE : int
ID : nav
SEMICOLON : ;
ID : fucn
LPAREN : (
ID : i
COMMA : ,
ID : i
EQUAL : ==
NUM : 2
COMMA : ,
ID : s
LSQUARE : [
ID : i
PLUS : +
NUM : 2
RSQUARE : ]
RPAREN : )
SEMICOLON : ;
WHILE : while
LPAREN : (
ID : i
RPAREN : )
LBRACE : {
return : return
NUM : 12
SEMICOLON : ;
RBRACE : }
return : return
NUM : 0
SEMICOLON : ;
RBRACE : }
